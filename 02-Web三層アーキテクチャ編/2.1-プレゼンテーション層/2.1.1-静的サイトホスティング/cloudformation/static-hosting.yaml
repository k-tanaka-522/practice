AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website Hosting with S3, CloudFront, and Route 53'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  ProjectName:
    Type: String
    Default: web-app
    Description: Project name for resource naming

  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name (optional)

  CertificateArn:
    Type: String
    Default: ''
    Description: ACM Certificate ARN for HTTPS (required if using custom domain)

  PriceClass:
    Type: String
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Description: CloudFront price class

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  UseHTTPS: !And [!Condition HasCustomDomain, !Condition HasCertificate]

Resources:
  # S3 Bucket for Static Website
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-static-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # S3 Bucket for Logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ProjectName}-${EnvironmentName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: 'Origin Access Control for Static Website'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'CloudFront Distribution for ${ProjectName}-${EnvironmentName}'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        PriceClass: !Ref PriceClass
        
        # Origins
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticWebsiteBucket.RegionalDomainName
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ''
        
        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd  # Managed-SimpleCORS
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt IndexHtmlFunction.FunctionMetadata.FunctionARN
        
        # Custom Error Pages
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        
        # Aliases (Custom Domain)
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName, !Sub 'www.${DomainName}']
          - !Ref AWS::NoValue
        
        # SSL Certificate
        ViewerCertificate: !If
          - UseHTTPS
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        
        # Logging
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: 'cloudfront-logs/'
          IncludeCookies: false
        
        # Web ACL (Optional - can be added later)
        # WebACLId: !Ref WebACL
      
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # CloudFront Function for SPA routing
  IndexHtmlFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-index-html-rewrite'
      FunctionConfig:
        Comment: 'Rewrite requests to index.html for SPA routing'
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
          
          // Check whether the URI is missing a file name
          if (uri.endsWith('/')) {
            request.uri += 'index.html';
          }
          // Check whether the URI is missing a file extension
          else if (!uri.includes('.')) {
            request.uri += '/index.html';
          }
          
          return request;
        }

  # S3 Bucket Policy for CloudFront
  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${StaticWebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Route 53 Records (if custom domain is provided)
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasCustomDomain
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        - Name: !Sub 'www.${DomainName}'
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2

  # Lambda Function for Custom Deployment
  DeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-deploy-website'
      Runtime: python3.9
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt DeploymentRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref StaticWebsiteBucket
          DISTRIBUTION_ID: !Ref CloudFrontDistribution
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  cloudfront = boto3.client('cloudfront')
                  
                  bucket_name = os.environ['BUCKET_NAME']
                  distribution_id = os.environ['DISTRIBUTION_ID']
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Upload default index.html
                      default_html = """
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <title>Welcome to Your Static Website</title>
                          <meta charset="utf-8">
                          <meta name="viewport" content="width=device-width, initial-scale=1">
                          <style>
                              body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                              .container { max-width: 600px; margin: 0 auto; }
                          </style>
                      </head>
                      <body>
                          <div class="container">
                              <h1>ðŸš€ Website Deployed Successfully!</h1>
                              <p>Your static website is now live and ready to be customized.</p>
                              <p>Environment: <strong>{}</strong></p>
                              <p>Replace this content by uploading your own files to the S3 bucket.</p>
                          </div>
                      </body>
                      </html>
                      """.format(os.environ.get('ENVIRONMENT', 'unknown'))
                      
                      s3.put_object(
                          Bucket=bucket_name,
                          Key='index.html',
                          Body=default_html,
                          ContentType='text/html'
                      )
                      
                      # Invalidate CloudFront cache
                      cloudfront.create_invalidation(
                          DistributionId=distribution_id,
                          InvalidationBatch={
                              'Paths': {
                                  'Quantity': 1,
                                  'Items': ['/*']
                              },
                              'CallerReference': str(context.aws_request_id)
                          }
                      )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM Role for Deployment Function
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub '${StaticWebsiteBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Custom Resource to Deploy Default Content
  DeployDefaultContent:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt DeploymentFunction.Arn
      BucketName: !Ref StaticWebsiteBucket
      DistributionId: !Ref CloudFrontDistribution
      Environment: !Ref EnvironmentName

  # CloudWatch Alarms
  CloudFrontErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-CloudFront-HighErrorRate'
      AlarmDescription: 'CloudFront error rate is too high'
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      TreatMissingData: notBreaching

  CloudFrontOriginLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-CloudFront-HighLatency'
      AlarmDescription: 'CloudFront origin latency is too high'
      MetricName: OriginLatency
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      TreatMissingData: notBreaching

Outputs:
  BucketName:
    Description: S3 Bucket Name for static website
    Value: !Ref StaticWebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketDomainName:
    Description: S3 Bucket Domain Name
    Value: !GetAtt StaticWebsiteBucket.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'

  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  DistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DistributionDomainName'

  WebsiteURL:
    Description: Website URL
    Value: !If
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  LoggingBucketName:
    Description: Logging Bucket Name
    Value: !Ref LoggingBucket
    Export:
      Name: !Sub '${AWS::StackName}-LoggingBucketName'