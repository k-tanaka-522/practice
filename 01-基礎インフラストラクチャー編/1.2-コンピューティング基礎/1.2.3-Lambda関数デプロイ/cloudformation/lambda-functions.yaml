AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Functions deployment with best practices'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  ProjectName:
    Type: String
    Default: lambda-functions
    Description: Project name for resource naming

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for Lambda functions (optional)
    Default: ''

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: List of private subnet IDs for VPC Lambda functions
    Default: ''

  NotificationEmail:
    Type: String
    Description: Email address for notifications
    Default: 'admin@example.com'

Conditions:
  IsProduction: !Equals [!Ref EnvironmentName, 'prod']
  UseVPC: !Not [!Equals [!Ref VpcId, '']]

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${EnvironmentName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If 
          - UseVPC
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: LambdaCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub '${LambdaCodeBucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt LambdaDataTable.Arn
                  - !Sub '${LambdaDataTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: 
                  - !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${EnvironmentName}/*'

  # Security Group for VPC Lambda Functions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseVPC
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-lambda-sg'
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-lambda-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # S3 Bucket for Lambda Code
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-lambda-code-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # DynamoDB Table for Lambda Data
  LambdaDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${EnvironmentName}-lambda-data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: type-timestamp-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${EnvironmentName}-notifications'
      DisplayName: !Sub '${ProjectName} ${EnvironmentName} Notifications'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # SNS Subscription
  NotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref NotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${EnvironmentName}'
      RetentionInDays: !If [IsProduction, 90, 7]

  # Hello World Lambda Function
  HelloWorldFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-hello-world'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      VpcConfig: !If
        - UseVPC
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref AWS::NoValue
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
          SNS_TOPIC_ARN: !Ref NotificationTopic
          DYNAMODB_TABLE: !Ref LambdaDataTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          import uuid

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # Environment variables
              environment = os.environ.get('ENVIRONMENT', 'dev')
              project_name = os.environ.get('PROJECT_NAME', 'lambda-functions')
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
              table_name = os.environ.get('DYNAMODB_TABLE')
              
              try:
                  # DynamoDB client
                  dynamodb = boto3.resource('dynamodb')
                  table = dynamodb.Table(table_name)
                  
                  # Create record
                  record_id = str(uuid.uuid4())
                  timestamp = datetime.utcnow().isoformat()
                  
                  item = {
                      'id': record_id,
                      'timestamp': timestamp,
                      'type': 'hello-world',
                      'environment': environment,
                      'project': project_name,
                      'event': event,
                      'status': 'success'
                  }
                  
                  # Put item in DynamoDB
                  table.put_item(Item=item)
                  
                  # Send SNS notification
                  sns = boto3.client('sns')
                  message = f"Hello World function executed successfully in {environment} environment"
                  
                  sns.publish(
                      TopicArn=sns_topic_arn,
                      Message=message,
                      Subject=f"{project_name} - Hello World Notification"
                  )
                  
                  response = {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Hello World from Lambda!',
                          'environment': environment,
                          'project': project_name,
                          'recordId': record_id,
                          'timestamp': timestamp
                      })
                  }
                  
                  print(f"Success: {response}")
                  return response
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Internal server error'
                      })
                  }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # Data Processor Lambda Function
  DataProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-data-processor'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig: !If
        - UseVPC
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds: !Ref PrivateSubnetIds
        - !Ref AWS::NoValue
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
          SNS_TOPIC_ARN: !Ref NotificationTopic
          DYNAMODB_TABLE: !Ref LambdaDataTable
          S3_BUCKET: !Ref LambdaCodeBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          import uuid

          def lambda_handler(event, context):
              print(f"Data processor received event: {json.dumps(event)}")
              
              # Environment variables
              environment = os.environ.get('ENVIRONMENT', 'dev')
              project_name = os.environ.get('PROJECT_NAME', 'lambda-functions')
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
              table_name = os.environ.get('DYNAMODB_TABLE')
              s3_bucket = os.environ.get('S3_BUCKET')
              
              try:
                  # Process DynamoDB stream records
                  if 'Records' in event:
                      processed_records = []
                      
                      for record in event['Records']:
                          if record.get('eventSource') == 'aws:dynamodb':
                              # Process DynamoDB stream record
                              event_name = record.get('eventName')
                              dynamodb_record = record.get('dynamodb', {})
                              
                              processed_record = {
                                  'eventName': event_name,
                                  'tableName': record.get('eventSourceARN', '').split('/')[-3] if record.get('eventSourceARN') else '',
                                  'timestamp': datetime.utcnow().isoformat(),
                                  'keys': dynamodb_record.get('Keys', {}),
                                  'newImage': dynamodb_record.get('NewImage', {}),
                                  'oldImage': dynamodb_record.get('OldImage', {})
                              }
                              
                              processed_records.append(processed_record)
                      
                      # Store processed data in S3
                      s3 = boto3.client('s3')
                      file_key = f"processed-data/{datetime.utcnow().strftime('%Y/%m/%d')}/{str(uuid.uuid4())}.json"
                      
                      s3.put_object(
                          Bucket=s3_bucket,
                          Key=file_key,
                          Body=json.dumps(processed_records, indent=2),
                          ContentType='application/json'
                      )
                      
                      # Send notification
                      sns = boto3.client('sns')
                      message = f"Processed {len(processed_records)} DynamoDB records and stored in S3: {file_key}"
                      
                      sns.publish(
                          TopicArn=sns_topic_arn,
                          Message=message,
                          Subject=f"{project_name} - Data Processing Complete"
                      )
                      
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'Data processing completed',
                              'processedRecords': len(processed_records),
                              's3Location': f"s3://{s3_bucket}/{file_key}"
                          })
                      }
                  
                  else:
                      # Handle direct invocation
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'Data processor function ready',
                              'environment': environment,
                              'project': project_name
                          })
                      }
                      
              except Exception as e:
                  print(f"Error in data processor: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Data processing failed'
                      })
                  }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # DynamoDB Stream Event Source Mapping
  DataProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt LambdaDataTable.StreamArn
      FunctionName: !Ref DataProcessorFunction
      StartingPosition: LATEST
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5

  # API Gateway for Lambda Functions
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-api'
      Description: !Sub 'API Gateway for ${ProjectName} Lambda functions'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: hello

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway.Arn}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref EnvironmentName

  # CloudWatch Alarms
  HelloWorldErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-hello-world-errors'
      AlarmDescription: Lambda function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref HelloWorldFunction
      AlarmActions:
        - !Ref NotificationTopic

  DataProcessorErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-data-processor-errors'
      AlarmDescription: Data processor function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataProcessorFunction
      AlarmActions:
        - !Ref NotificationTopic

Outputs:
  HelloWorldFunctionArn:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-HelloWorldFunction'

  DataProcessorFunctionArn:
    Description: Data Processor Lambda Function ARN
    Value: !GetAtt DataProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DataProcessorFunction'

  ApiGatewayURL:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/hello'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayURL'

  LambdaCodeBucket:
    Description: S3 Bucket for Lambda code
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub '${AWS::StackName}-CodeBucket'

  DynamoDBTable:
    Description: DynamoDB Table for Lambda data
    Value: !Ref LambdaDataTable
    Export:
      Name: !Sub '${AWS::StackName}-DataTable'

  SNSTopicArn:
    Description: SNS Topic ARN for notifications
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopic'