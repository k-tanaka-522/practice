AWSTemplateFormatVersion: '2010-09-09'
Description: 'Enhanced IAM Foundation - Groups, Roles, and Policies for secure AWS environment'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
    
  OrganizationName:
    Type: String
    Default: MyOrg
    Description: Organization name for resource naming
    
  EnableMFARequirement:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Require MFA for privileged operations

Resources:
  # IAM Groups
  AdministratorsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-Administrators'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /

  PowerUsersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-PowerUsers'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Path: /

  DevelopersGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-Developers'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: DeveloperAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # Lambda permissions
                  - lambda:*
                  # API Gateway permissions
                  - apigateway:*
                  # CloudFormation permissions
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStacks
                  # S3 permissions for specific buckets
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  # CloudWatch permissions
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - cloudwatch:PutMetricData
                  # IAM permissions for service roles
                  - iam:PassRole
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
      Path: /

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-ReadOnly'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /

  BillingGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-Billing'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/Billing
      Path: /

  SecurityGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${OrganizationName}-Security'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecurityAudit
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
      Policies:
        - PolicyName: SecurityAuditAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudtrail:*
                  - config:*
                  - guardduty:*
                  - securityhub:*
                  - inspector:*
                Resource: '*'
      Path: /

  # Service Roles
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${OrganizationName}-EC2-InstanceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EC2BasicAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${OrganizationName}-${EnvironmentName}-*'
                  - !Sub 'arn:aws:s3:::${OrganizationName}-${EnvironmentName}-*/*'
      Path: /service-roles/
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: EC2InstanceRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${OrganizationName}-EC2-InstanceProfile'
      Roles:
        - !Ref EC2InstanceRole
      Path: /service-roles/

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${OrganizationName}-Lambda-ExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: LambdaBasicAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrganizationName}-${EnvironmentName}-*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${OrganizationName}-${EnvironmentName}-*'
                  - !Sub 'arn:aws:s3:::${OrganizationName}-${EnvironmentName}-*/*'
      Path: /service-roles/
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: LambdaExecutionRole

  # CI/CD Roles
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${OrganizationName}-GitHubActions-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': sts.amazonaws.com
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:*:*'
      Policies:
        - PolicyName: GitHubActionsDeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # CloudFormation permissions
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStacks
                  - cloudformation:GetTemplate
                  - cloudformation:ValidateTemplate
                  # S3 permissions for deployment artifacts
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  # Lambda permissions for deployment
                  - lambda:CreateFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - lambda:PublishVersion
                  - lambda:CreateAlias
                  - lambda:UpdateAlias
                  - lambda:DeleteAlias
                  - lambda:AddPermission
                  - lambda:RemovePermission
                  # IAM permissions for service roles
                  - iam:PassRole
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:UpdateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Ref AWS::Region
      Path: /ci-cd/
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: GitHubActionsRole

  # Cross-Account Access Role
  CrossAccountAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${OrganizationName}-CrossAccount-AccessRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: !Ref EnableMFARequirement
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /cross-account/
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Purpose
          Value: CrossAccountAccess

  # Custom Policies
  MFAEnforcementPolicy:
    Type: AWS::IAM::Policy
    Condition: RequireMFA
    Properties:
      PolicyName: !Sub '${OrganizationName}-MFA-EnforcementPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowViewAccountInfo
            Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
              - iam:GetAccountSummary
              - iam:ListVirtualMFADevices
            Resource: '*'
          - Sid: AllowManageOwnPasswords
            Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:GetUser
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
          - Sid: AllowManageOwnMFA
            Effect: Allow
            Action:
              - iam:CreateVirtualMFADevice
              - iam:DeleteVirtualMFADevice
              - iam:ListMFADevices
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
          - Sid: DenyAllExceptUnlessSignedInWithMFA
            Effect: Deny
            NotAction:
              - iam:CreateVirtualMFADevice
              - iam:EnableMFADevice
              - iam:GetUser
              - iam:ListMFADevices
              - iam:ListVirtualMFADevices
              - iam:ResyncMFADevice
              - sts:GetSessionToken
            Resource: '*'
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: 'false'
      Groups:
        - !Ref AdministratorsGroup
        - !Ref PowerUsersGroup

  CostOptimizationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${OrganizationName}-CostOptimization-Policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action:
              - ec2:RunInstances
            Resource: 'arn:aws:ec2:*:*:instance/*'
            Condition:
              ForAllValues:StringNotEquals:
                ec2:InstanceType:
                  - t3.micro
                  - t3.small
                  - t3.medium
                  - t3.large
          - Effect: Allow
            Action:
              - ec2:RunInstances
            Resource: '*'
            Condition:
              StringEquals:
                ec2:InstanceType:
                  - t3.micro
                  - t3.small
                  - t3.medium
                  - t3.large
      Groups:
        - !Ref DevelopersGroup

Conditions:
  RequireMFA: !Equals [!Ref EnableMFARequirement, 'true']

Outputs:
  AdministratorsGroup:
    Description: Administrators Group Name
    Value: !Ref AdministratorsGroup
    Export:
      Name: !Sub '${AWS::StackName}-AdministratorsGroup'

  PowerUsersGroup:
    Description: PowerUsers Group Name
    Value: !Ref PowerUsersGroup
    Export:
      Name: !Sub '${AWS::StackName}-PowerUsersGroup'

  DevelopersGroup:
    Description: Developers Group Name
    Value: !Ref DevelopersGroup
    Export:
      Name: !Sub '${AWS::StackName}-DevelopersGroup'

  ReadOnlyGroup:
    Description: ReadOnly Group Name
    Value: !Ref ReadOnlyGroup
    Export:
      Name: !Sub '${AWS::StackName}-ReadOnlyGroup'

  EC2InstanceRole:
    Description: EC2 Instance Role ARN
    Value: !GetAtt EC2InstanceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceRole'

  EC2InstanceProfile:
    Description: EC2 Instance Profile ARN
    Value: !GetAtt EC2InstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceProfile'

  LambdaExecutionRole:
    Description: Lambda Execution Role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRole'

  GitHubActionsRole:
    Description: GitHub Actions Role ARN
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsRole'

  CrossAccountAccessRole:
    Description: Cross Account Access Role ARN
    Value: !GetAtt CrossAccountAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CrossAccountAccessRole'