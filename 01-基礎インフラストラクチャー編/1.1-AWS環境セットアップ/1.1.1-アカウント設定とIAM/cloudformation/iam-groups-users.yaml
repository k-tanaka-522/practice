AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM groups and sample users with appropriate permissions based on least privilege principle'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource tagging

  ProjectName:
    Type: String
    Default: aws-learning
    Description: Project name for resource identification

  MFAEnforcementPolicyArn:
    Type: String
    Description: ARN of the MFA enforcement policy to attach to groups

  CreateSampleUsers:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Whether to create sample users for testing

Conditions:
  ShouldCreateSampleUsers: !Equals [!Ref CreateSampleUsers, 'true']

Resources:
  # Administrator Group
  AdministratorGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-Administrators
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - !Ref MFAEnforcementPolicyArn

  # PowerUser Group (Full access except IAM)
  PowerUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-PowerUsers
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - !Ref MFAEnforcementPolicyArn
      Policies:
        - PolicyName: SelfServiceIAM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowUsersToManageTheirOwnCredentials
                Effect: Allow
                Action:
                  - iam:*LoginProfile
                  - iam:*AccessKey*
                  - iam:*SSHPublicKey*
                  - iam:*ServiceSpecificCredential*
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}

  # Developer Group
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-Developers
      Path: /
      ManagedPolicyArns:
        - !Ref MFAEnforcementPolicyArn
      Policies:
        - PolicyName: DeveloperAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # EC2 permissions
              - Sid: EC2Development
                Effect: Allow
                Action:
                  - ec2:*
                Resource: '*'
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/Environment': !Ref EnvironmentName
              
              # S3 permissions
              - Sid: S3Development
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${ProjectName}-${EnvironmentName}-*
                  - !Sub arn:aws:s3:::${ProjectName}-${EnvironmentName}-*/*
              
              # Lambda permissions
              - Sid: LambdaDevelopment
                Effect: Allow
                Action:
                  - lambda:*
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-${EnvironmentName}-*
              
              # DynamoDB permissions
              - Sid: DynamoDBDevelopment
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-${EnvironmentName}-*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-${EnvironmentName}-*/index/*
              
              # RDS permissions
              - Sid: RDSDevelopment
                Effect: Allow
                Action:
                  - rds:Describe*
                  - rds:List*
                  - rds:CreateDBSnapshot
                  - rds:RestoreDBInstanceFromDBSnapshot
                Resource: '*'
              
              # CloudFormation permissions
              - Sid: CloudFormationDevelopment
                Effect: Allow
                Action:
                  - cloudformation:*
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}-${EnvironmentName}-*/*
              
              # CloudWatch permissions
              - Sid: CloudWatchAccess
                Effect: Allow
                Action:
                  - cloudwatch:*
                  - logs:*
                Resource: '*'
              
              # Systems Manager Parameter Store
              - Sid: ParameterStoreAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter*
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:DescribeParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${EnvironmentName}/*
              
              # Pass role for services
              - Sid: PassRoleToServices
                Effect: Allow
                Action: iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-${EnvironmentName}-*
                Condition:
                  StringEquals:
                    'iam:PassedToService':
                      - lambda.amazonaws.com
                      - ecs-tasks.amazonaws.com
                      - ec2.amazonaws.com

  # ReadOnly Group
  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-ReadOnly
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Ref MFAEnforcementPolicyArn

  # Billing Group
  BillingGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-Billing
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/Billing
        - !Ref MFAEnforcementPolicyArn
      Policies:
        - PolicyName: CostExplorerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ce:*
                  - budgets:*
                  - aws-portal:View*
                Resource: '*'

  # Security Group
  SecurityGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${ProjectName}-${EnvironmentName}-Security
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecurityAudit
        - !Ref MFAEnforcementPolicyArn
      Policies:
        - PolicyName: SecurityToolsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - guardduty:*
                  - securityhub:*
                  - access-analyzer:*
                  - config:*
                  - cloudtrail:*
                  - inspector2:*
                  - detective:*
                Resource: '*'

  # Sample Users (only created if enabled)
  SampleAdminUser:
    Type: AWS::IAM::User
    Condition: ShouldCreateSampleUsers
    Properties:
      UserName: !Sub ${ProjectName}-${EnvironmentName}-admin-user
      Path: /
      Groups:
        - !Ref AdministratorGroup
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: SampleUser

  SampleDeveloperUser:
    Type: AWS::IAM::User
    Condition: ShouldCreateSampleUsers
    Properties:
      UserName: !Sub ${ProjectName}-${EnvironmentName}-dev-user
      Path: /
      Groups:
        - !Ref DeveloperGroup
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: SampleUser

  SampleReadOnlyUser:
    Type: AWS::IAM::User
    Condition: ShouldCreateSampleUsers
    Properties:
      UserName: !Sub ${ProjectName}-${EnvironmentName}-readonly-user
      Path: /
      Groups:
        - !Ref ReadOnlyGroup
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: SampleUser

Outputs:
  AdminGroupArn:
    Description: ARN of the Administrator group
    Value: !GetAtt AdministratorGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AdminGroupArn

  PowerUserGroupArn:
    Description: ARN of the PowerUser group
    Value: !GetAtt PowerUserGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PowerUserGroupArn

  DeveloperGroupArn:
    Description: ARN of the Developer group
    Value: !GetAtt DeveloperGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DeveloperGroupArn

  ReadOnlyGroupArn:
    Description: ARN of the ReadOnly group
    Value: !GetAtt ReadOnlyGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ReadOnlyGroupArn

  BillingGroupArn:
    Description: ARN of the Billing group
    Value: !GetAtt BillingGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-BillingGroupArn

  SecurityGroupArn:
    Description: ARN of the Security group
    Value: !GetAtt SecurityGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroupArn