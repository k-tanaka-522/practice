# ===========================================
# VPCネットワークインフラストラクチャー
# ===========================================
# このテンプレートは、AWS上に完全なネットワーク基盤を構築します。
# マルチAZ構成により高可用性を実現し、セキュリティベストプラクティスに準拠しています。
#
# アーキテクチャ概要:
# - パブリックサブネット: インターネット接続が必要なリソース（ALB、NAT Gateway等）
# - プライベートサブネット: アプリケーションサーバー等の保護されたリソース
# - データベースサブネット: RDS等のデータベース専用（インターネット接続なし）
# ===========================================

AWSTemplateFormatVersion: '2010-09-09'
Description: |
  包括的なVPCネットワークインフラストラクチャのテンプレート
  
  このテンプレートは以下のリソースを作成します：
  - VPC (10.0.0.0/16)
  - パブリックサブネット x 2 (マルチAZ)
  - プライベートサブネット x 2 (マルチAZ)
  - データベースサブネット x 2 (マルチAZ)
  - インターネットゲートウェイ
  - NATゲートウェイ x 2 (高可用性)
  - ルートテーブルとアソシエーション
  - セキュリティグループ (Web、App、DB、Bastion)
  - VPCエンドポイント (S3、DynamoDB)
  - VPCフローログ
  - ネットワークACL

# ===========================================
# パラメータ定義
# ===========================================
# これらのパラメータを使用して、環境ごとに異なる設定を適用できます。
# 本番環境では高可用性とセキュリティを重視し、開発環境ではコスト最適化を優先します。
Parameters:
  # 環境名パラメータ
  # この値によってリソースの命名規則やサイジング、セキュリティ設定が変更されます
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: |
      環境名
      - dev: 開発環境（コスト最適化）
      - staging: ステージング環境
      - prod: 本番環境（高可用性）

  ProjectName:
    Type: String
    Default: vpc-network
    Description: リソース命名に使用するプロジェクト名

  # VPCネットワーク範囲
  # CIDR（Classless Inter-Domain Routing）ブロックを指定します
  # /16 = 65,536個のIPアドレス（大規模環境向け）
  # /20 = 4,096個のIPアドレス（中規模環境向け）
  # /24 = 256個のIPアドレス（小規模環境向け）
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: |
      VPCのCIDRブロック
      推奨: 10.0.0.0/16 (65,536 IPアドレス)

  # NATゲートウェイ設定
  # NATゲートウェイは、プライベートサブネット内のリソースがインターネットに
  # アクセスするための重要なコンポーネントです。本番環境では必須ですが、
  # 開発環境ではコスト削減のために無効化することも可能です。
  # 注意: NATゲートウェイは時間単位で課金されるため、コストに影響します
  EnableNatGateway:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: |
      NATゲートウェイの有効化
      - true: プライベートサブネットからインターネットアクセス可能
      - false: コスト削減（開発環境向け）

# ===========================================
# 条件定義
# ===========================================
# CloudFormationの条件機能を使用して、パラメータの値に基づいて
# リソースの作成や設定を動的に制御します
Conditions:
  # NATゲートウェイ作成条件
  # 開発環境ではコスト削減のため、NATゲートウェイを作成しない選択も可能
  CreateNatGateway: !Equals [!Ref EnableNatGateway, 'true']
  
  # 本番環境判定条件
  # この条件により、ログ保持期間、バックアップ設定、モニタリング設定などが変更されます
  IsProduction: !Equals [!Ref EnvironmentName, 'prod']

Resources:
  # ========================================
  # VPC（Virtual Private Cloud）
  # ========================================
  # VPCはAWS上の仮想ネットワークです。
  # すべてのAWSリソースはこのVPC内に配置されます。
  # 
  # 重要な設定:
  # - EnableDnsHostnames: EC2インスタンスにDNS名を自動割り当て
  # - EnableDnsSupport: VPC内でのDNS解決を有効化（必須）
  # ========================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true  # DNSホスト名の解決を有効化（RDS等で必要）
      EnableDnsSupport: true    # DNS解決を有効化（VPC内通信で必須）
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-vpc'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # インターネットゲートウェイ（IGW）
  # ========================================
  # IGWはVPCとインターネット間の通信を可能にするゲートウェイです。
  # パブリックサブネット内のリソースがインターネットと通信するために必要です。
  # 
  # セキュリティ上の注意点:
  # - IGWは双方向の通信を許可します
  # - セキュリティグループとNACLで適切にアクセス制御することが重要です
  # ========================================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-igw'
        - Key: Environment
          Value: !Ref EnvironmentName

  # IGWをVPCにアタッチ
  # この関連付けにより、VPCがインターネットに接続可能になります
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ========================================
  # パブリックサブネット（インターネット接続可能）
  # ========================================
  # パブリックサブネットは、インターネットからの直接アクセスが可能なサブネットです。
  # 主に以下のリソースを配置します:
  # - Application Load Balancer (ALB)
  # - NAT Gateway
  # - Bastion Host（踏み台サーバー）
  # 
  # セキュリティ上の重要な設定:
  # - MapPublicIpOnLaunch: 自動的にパブリックIPを割り当て（ELB等で必要）
  # - 必要最小限のリソースのみ配置し、適切なセキュリティグループで保護
  # ========================================
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']  # リージョン内の最初のAZ（例: ap-northeast-1a）
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.0.0/24（256個のIP）
      MapPublicIpOnLaunch: true  # 起動時にパブリックIPを自動割り当て
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-subnet-1'
        - Key: Type
          Value: Public
        - Key: Environment
          Value: !Ref EnvironmentName

  # 高可用性のための2つ目のパブリックサブネット
  # マルチAZ構成により、1つのAZに障害が発生しても継続してサービスを提供できます
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']  # リージョン内の2番目のAZ（例: ap-northeast-1c）
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.1.0/24（256個のIP）
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-subnet-2'
        - Key: Type
          Value: Public
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # プライベートサブネット（NATゲートウェイ経由）
  # ========================================
  # プライベートサブネットは、インターネットから直接アクセスできないサブネットです。
  # 主に以下のリソースを配置します:
  # - EC2インスタンス（アプリケーションサーバー）
  # - ECSタスク
  # - Lambda関数（VPC内実行）
  # 
  # インターネットアクセス:
  # - アウトバウンド通信: NATゲートウェイ経由で可能
  # - インバウンド通信: ロードバランサー経由でのみ可能
  # 
  # セキュリティ上の利点:
  # - インターネットから直接アクセスできないため、攻撃対象になりにくい
  # - 必要な通信のみNATゲートウェイ経由で許可
  # ========================================
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.2.0/24（256個のIP）
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-private-subnet-1'
        - Key: Type
          Value: Private
        - Key: Environment
          Value: !Ref EnvironmentName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-private-subnet-2'
        - Key: Type
          Value: Private
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # データベースサブネット（インターネット接続なし）
  # ========================================
  # データベースサブネットは、最も保護されたサブネットです。
  # 主に以下のリソースを配置します:
  # - RDS（リレーショナルデータベース）
  # - ElastiCache（キャッシュサーバー）
  # - DocumentDB、Neptune等のマネージドデータベース
  # 
  # セキュリティ上の重要な特徴:
  # - インターネットへの接続経路が一切ない（NATゲートウェイも経由しない）
  # - アプリケーション層からのみアクセス可能
  # - データベース用セキュリティグループで厳密にアクセス制御
  # 
  # 本番環境での推奨設定:
  # - 暗号化を有効化（保存時・転送時）
  # - 自動バックアップを設定
  # - マルチAZ配置で高可用性を確保
  # ========================================
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.4.0/24（256個のIP）
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-database-subnet-1'
        - Key: Type
          Value: Database
        - Key: Environment
          Value: !Ref EnvironmentName

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [!Ref VpcCidr, 6, 8]]  # 10.0.5.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-database-subnet-2'
        - Key: Type
          Value: Database
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # NATゲートウェイ（高可用性のため2つ）
  # ========================================
  # NATゲートウェイは、プライベートサブネット内のリソースが
  # インターネットにアクセスするための重要なコンポーネントです。
  # 
  # 主な用途:
  # - OSアップデート、パッチ適用
  # - 外部APIへのアクセス
  # - パッケージのダウンロード
  # 
  # コスト最適化のヒント:
  # - 開発環境では1つのNATゲートウェイで十分な場合もある
  # - 使用していない時間帯は削除してコスト削減可能
  # - NATインスタンスを使用する選択肢もある（管理は複雑）
  # 
  # 本番環境での推奨:
  # - 各AZに1つずつ配置（高可用性）
  # - CloudWatchでトラフィックを監視
  # ========================================
  # Elastic IPアドレス（NATゲートウェイ用）
  # 固定IPアドレスにより、外部サービスのIPホワイトリストに登録可能
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: CreateNatGateway
    DependsOn: InternetGatewayAttachment  # IGWアタッチ後に作成（依存関係）
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-nat1-eip'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: CreateNatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-nat2-eip'

  # NATゲートウェイ（AZ1用）
  # パブリックサブネットに配置し、同じAZ内のプライベートサブネットからの
  # アウトバウンド通信を処理します
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1  # 必ずパブリックサブネットに配置
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-nat-gateway-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-nat-gateway-2'

  # ========================================
  # ルートテーブル
  # ========================================
  # ルートテーブルは、サブネット内のトラフィックの経路を定義します。
  # 各サブネットは1つのルートテーブルに関連付けられます。
  # 
  # ルートテーブルの種類:
  # 1. パブリックルートテーブル: IGW経由でインターネットアクセス
  # 2. プライベートルートテーブル: NAT Gateway経由でインターネットアクセス
  # 3. データベースルートテーブル: インターネットアクセスなし（VPC内のみ）
  # ========================================
  # パブリックルートテーブル
  # インターネットゲートウェイへのルートを含みます
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-routes'
        - Key: Environment
          Value: !Ref EnvironmentName

  # インターネットへのデフォルトルート
  # 0.0.0.0/0は「すべてのIPアドレス」を意味します
  # VPC内の通信以外はすべてインターネットゲートウェイに転送されます
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # すべての宛先（インターネット）
      GatewayId: !Ref InternetGateway

  # パブリックサブネットをルートテーブルに関連付け
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # プライベートルートテーブル（AZ1）
  # プライベートサブネット用のルートテーブル
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-private-routes-1'
        - Key: Environment
          Value: !Ref EnvironmentName

  # NATゲートウェイ経由のデフォルトルート
  # プライベートサブネットからのインターネット向け通信は
  # すべてNATゲートウェイを経由します
  # 注意: NATゲートウェイが無効の場合、インターネットアクセスは不可能になります
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # プライベートルートテーブル（AZ2）
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-private-routes-2'
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # データベース用ルートテーブル（インターネット接続なし）
  # このルートテーブルにはインターネットへのルートが含まれません
  # VPC内の通信のみ可能で、最高レベルのセキュリティを提供します
  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-database-routes'
        - Key: Environment
          Value: !Ref EnvironmentName

  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet2

  # ========================================
  # セキュリティグループ
  # ========================================
  # セキュリティグループは、インスタンスレベルのファイアウォールです。
  # ステートフルな特性を持ち、許可したインバウンド通信の戻り通信は自動的に許可されます。
  # 
  # ベストプラクティス:
  # - 最小権限の原則に従い、必要最小限のポートのみ開放
  # - 送信元IPアドレスを可能な限り制限
  # - セキュリティグループ間の参照を使用して管理を簡素化
  # - 各ルールに説明を追加して可読性を向上
  # ========================================
  # Webサーバー用セキュリティグループ
  # ALBやWebサーバーに適用するセキュリティグループ
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-web-sg'
      GroupDescription: |
        Webサーバー用セキュリティグループ
        - HTTP (80) とHTTPS (443) を全てのIPから許可
        - SSH (22) はBastionホストからのみ許可
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # HTTP通信（本番環境ではHTTPSへのリダイレクト推奨）
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
        # HTTPS通信（SSL/TLS暗号化通信）
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from anywhere
        # SSH通信（管理用）- Bastionホストからのみ許可
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: SSH from bastion
      SecurityGroupEgress:
        # すべてのアウトバウンド通信を許可（必要に応じて制限可能）
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-web-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # アプリケーションサーバー用セキュリティグループ
  # プライベートサブネット内のアプリケーションサーバーに適用
  # Webレイヤーからのみアクセスを許可し、多層防御を実現
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-app-sg'
      GroupDescription: |
        アプリケーションサーバー用セキュリティグループ
        - アプリケーションポート (8080) をWebサーバーから許可
        - SSH (22) はBastionホストからのみ許可
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # アプリケーションポート（例: Tomcat, Spring Boot等）
        # ポート番号は実際のアプリケーションに合わせて変更してください
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
          Description: App port from web servers
        # 管理用SSH（Bastionホスト経由のみ）
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: SSH from bastion
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-app-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # データベース用セキュリティグループ
  # 最も厳格なセキュリティ設定を適用
  # アプリケーション層からのみアクセスを許可
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-db-sg'
      GroupDescription: |
        データベースサーバー用セキュリティグループ
        - MySQL (3306) とPostgreSQL (5432) をアプリケーションサーバーから許可
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # MySQL/MariaDB用ポート
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          Description: MySQL from application servers
        # PostgreSQL用ポート
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          Description: PostgreSQL from application servers
      # アウトバウンドルールを意図的に設定しない（デフォルト拒否）
      # データベースからの外部通信は原則不要
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-db-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Bastionホスト用セキュリティグループ
  # 踏み台サーバーは、プライベートサブネット内のリソースに
  # 安全にアクセスするための中継点です
  # 
  # セキュリティ強化の推奨事項:
  # 1. 本番環境では必ず送信元IPを制限（会社のIPアドレス等）
  # 2. Session Manager使用時は不要（より安全）
  # 3. 多要素認証（MFA）の設定
  # 4. アクセスログの記録と監視
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${EnvironmentName}-bastion-sg'
      GroupDescription: |
        Bastionホスト（踏み台サーバー）用セキュリティグループ
        - SSH (22) を全てのIPから許可（本番環境では制限推奨）
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # 警告: 本番環境では必ず特定のIPに制限してください
          Description: SSH from anywhere (restrict in production)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-bastion-sg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # RDS用データベースサブネットグループ
  # ========================================
  # RDSインスタンスを作成する際に必要なサブネットグループです。
  # 複数のAZにまたがるサブネットを含める必要があります。
  # 
  # マルチAZ配置の利点:
  # - 自動フェイルオーバー（プライマリDBに障害時）
  # - メンテナンス時のダウンタイム最小化
  # - データの同期レプリケーション
  # 
  # 注意事項:
  # - 最低2つの異なるAZのサブネットが必要
  # - サブネットは同じVPC内である必要がある
  # ========================================
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${ProjectName}-${EnvironmentName}-db-subnet-group'
      DBSubnetGroupDescription: |
        RDSデータベース用のサブネットグループ
        マルチAZ配置のために複数のAZにまたがるサブネットを指定
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-db-subnet-group'
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # VPCエンドポイント（プライベート接続）
  # ========================================
  # VPCエンドポイントを使用することで、インターネットを経由せずに
  # AWSサービスにプライベート接続できます。
  # 
  # メリット:
  # - セキュリティ向上（インターネット経由しない）
  # - データ転送コスト削減
  # - レイテンシー改善
  # - NATゲートウェイの負荷軽減
  # 
  # エンドポイントの種類:
  # - ゲートウェイ型: S3、DynamoDB用（無料）
  # - インターフェース型: その他のAWSサービス用（有料）
  # ========================================
  # S3用VPCエンドポイント（ゲートウェイ型）
  # S3へのアクセスをVPC内で完結させます
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref DatabaseRouteTable

  # DynamoDB用VPCエンドポイント（ゲートウェイ型）
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2

  # ========================================
  # VPCフローログ
  # ========================================
  # VPCフローログは、VPC内のネットワークトラフィックを記録します。
  # セキュリティ監査、トラブルシューティング、コンプライアンス対応に使用。
  # 
  # 記録される情報:
  # - 送信元・宛先IPアドレス
  # - 送信元・宛先ポート番号
  # - プロトコル
  # - パケット数・バイト数
  # - アクション（ACCEPT/REJECT）
  # 
  # 本番環境での活用:
  # - 不正アクセスの検知
  # - トラフィックパターンの分析
  # - セキュリティグループの効果検証
  # ========================================
  # フローログ用IAMロール
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/VPCFlowLogsDeliveryRolePolicy

  # CloudWatchロググループ
  # フローログの保存先となるロググループ
  # 保持期間は環境によって自動調整されます
  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${ProjectName}-${EnvironmentName}'
      RetentionInDays: !If [IsProduction, 90, 7]  # 本番: 90日（コンプライアンス要件）、その他: 7日（コスト削減）

  # VPCフローログ
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL  # ACCEPT、REJECT両方のトラフィックを記録（セキュリティ分析に重要）
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogsLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-flow-logs'
        - Key: Environment
          Value: !Ref EnvironmentName

  # ========================================
  # ネットワークACL（追加のセキュリティレイヤー）
  # ========================================
  # ネットワークACL（NACL）は、サブネットレベルのファイアウォールです。
  # セキュリティグループとは異なり、ステートレスで番号順にルールが評価されます。
  # 
  # セキュリティグループとの違い:
  # - NACL: サブネットレベル、ステートレス、明示的な許可・拒否が必要
  # - SG: インスタンスレベル、ステートフル、戻り通信は自動許可
  # 
  # 使用する場面:
  # - 特定のIPアドレスやポートを完全にブロック
  # - サブネット間の通信制御
  # - 多層防御の実装
  # ========================================
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-public-nacl'
        - Key: Environment
          Value: !Ref EnvironmentName

  # インバウンドルール（すべて許可）
  # 初期設定では全許可ですが、本番環境では必要に応じて制限を追加してください
  # ルール番号が小さいほど優先度が高くなります（100, 200, 300...）
  PublicInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1  # すべてのプロトコル（TCP、UDP、ICMP等）
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # アウトバウンドルール（すべて許可）
  # エフェメラルポート（1024-65535）の戻り通信を含むすべての通信を許可
  PublicOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # パブリックサブネットにNACLを関連付け
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

# ========================================
# 出力値（他のスタックから参照可能）
# ========================================
# これらの出力値は、他のCloudFormationスタックから
# Fn::ImportValue関数を使用して参照できます。
# 例: !ImportValue 'vpc-network-dev-VPC-ID'
# 
# 出力値の命名規則:
# ${スタック名}-${リソース種別}-${識別子}
# ========================================
Outputs:
  # VPC情報
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  VPCCidr:
    Description: VPC CIDR Block
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${AWS::StackName}-VPC-CIDR'

  # サブネット情報
  PublicSubnets:
    Description: List of public subnets
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  PrivateSubnets:
    Description: List of private subnets
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  DatabaseSubnets:
    Description: List of database subnets
    Value: !Join [',', [!Ref DatabaseSubnet1, !Ref DatabaseSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSubnets'

  # RDS用サブネットグループ
  DatabaseSubnetGroup:
    Description: Database subnet group
    Value: !Ref DatabaseSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSubnetGroup'

  # セキュリティグループ
  WebServerSecurityGroup:
    Description: Web server security group
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-WebServerSG'

  ApplicationSecurityGroup:
    Description: Application security group
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationSG'

  DatabaseSecurityGroup:
    Description: Database security group
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSG'

  BastionSecurityGroup:
    Description: Bastion security group
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-BastionSG'

  # ゲートウェイ情報
  InternetGateway:
    Description: Internet Gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'

  NatGateway1:
    Condition: CreateNatGateway
    Description: NAT Gateway 1
    Value: !Ref NatGateway1
    Export:
      Name: !Sub '${AWS::StackName}-NatGateway1'

  NatGateway2:
    Condition: CreateNatGateway
    Description: NAT Gateway 2
    Value: !Ref NatGateway2
    Export:
      Name: !Sub '${AWS::StackName}-NatGateway2'
