AWSTemplateFormatVersion: '2010-09-09'
Description: |
  リアルタイム更新システム - 統合モニタリングと運用支援
  
  このテンプレートは以下のリソースを作成します：
  - CloudWatch詳細メトリクスとアラーム
  - X-Ray分散トレーシング
  - AWS Config設定コンプライアンス
  - Systems Manager運用自動化
  - CloudTrail監査ログ

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: 環境名

  ProjectName:
    Type: String
    Default: realtime-monitoring
    Description: プロジェクト名

  # 監視対象リソース
  WebSocketApiId:
    Type: String
    Description: WebSocket API ID

  CloudFrontDistributionId:
    Type: String
    Description: CloudFront配信ID

  ConnectionsTableName:
    Type: String
    Description: 接続管理DynamoDBテーブル名

  MessagesTableName:
    Type: String
    Description: メッセージDynamoDBテーブル名

  # アラート設定
  AlertEmail:
    Type: String
    Default: admin@example.com
    Description: アラート通知用メールアドレス

  # 監視レベル設定
  MonitoringLevel:
    Type: String
    Default: standard
    AllowedValues: [basic, standard, advanced]
    Description: |
      監視レベル
      - basic: 基本的なアラーム
      - standard: 詳細なメトリクス
      - advanced: 全監視機能

Conditions:
  # 本番環境かどうか
  IsProduction: !Equals [!Ref EnvironmentName, 'prod']
  
  # 監視レベル判定
  IsStandardMonitoring: !Or
    - !Equals [!Ref MonitoringLevel, 'standard']
    - !Equals [!Ref MonitoringLevel, 'advanced']
  
  IsAdvancedMonitoring: !Equals [!Ref MonitoringLevel, 'advanced']

Resources:
  # ========================================
  # SNS通知トピック
  # ========================================
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${EnvironmentName}-monitoring-alerts'
      DisplayName: !Sub '${ProjectName} ${EnvironmentName} 監視アラート'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: !Ref AlertEmail

  # ========================================
  # CloudWatch Composite Alarms
  # ========================================
  # システム全体の健全性コンポジットアラーム
  SystemHealthCompositeAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-system-health'
      AlarmDescription: システム全体の健全性を監視するコンポジットアラーム
      AlarmRule: !Sub |
        ALARM(${WebSocketErrorAlarm}) OR 
        ALARM(${DynamoDBErrorAlarm}) OR 
        ALARM(${CloudFrontErrorAlarm}) OR
        ALARM(${LambdaErrorAlarm})
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # ========================================
  # CloudWatch詳細アラーム
  # ========================================
  # WebSocket API エラーアラーム
  WebSocketErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-websocket-errors'
      AlarmDescription: WebSocket API エラー率監視
      MetricName: IntegrationError
      Namespace: AWS/ApiGatewayV2
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: ApiId
          Value: !Ref WebSocketApiId
        - Name: Stage
          Value: !Ref EnvironmentName
      AlarmActions:
        - !Ref AlertTopic

  # WebSocket 接続レイテンシアラーム
  WebSocketLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsStandardMonitoring
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-websocket-latency'
      AlarmDescription: WebSocket API レイテンシ監視
      MetricName: IntegrationLatency
      Namespace: AWS/ApiGatewayV2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: ApiId
          Value: !Ref WebSocketApiId
        - Name: Stage
          Value: !Ref EnvironmentName
      AlarmActions:
        - !Ref AlertTopic

  # DynamoDB エラーアラーム
  DynamoDBErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-dynamodb-errors'
      AlarmDescription: DynamoDB システムエラー監視
      MetricName: SystemErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TableName
          Value: !Ref ConnectionsTableName
      AlarmActions:
        - !Ref AlertTopic

  # DynamoDB スロットリングアラーム
  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-dynamodb-throttle'
      AlarmDescription: DynamoDB スロットリング監視
      MetricName: ThrottledRequests
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: TableName
          Value: !Ref ConnectionsTableName
      AlarmActions:
        - !Ref AlertTopic

  # CloudFront エラー率アラーム
  CloudFrontErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-cloudfront-errors'
      AlarmDescription: CloudFront 4xx/5xx エラー率監視
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId
      AlarmActions:
        - !Ref AlertTopic

  # Lambda エラーアラーム
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-lambda-errors'
      AlarmDescription: Lambda関数エラー率監視
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertTopic

  # ========================================
  # カスタムメトリクス
  # ========================================
  # 同時接続数監視Lambda
  ConnectionCountFunction:
    Type: AWS::Lambda::Function
    Condition: IsStandardMonitoring
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-connection-count'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ConnectionCountRole.Arn
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTableName
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          from boto3.dynamodb.conditions import Key
          
          dynamodb = boto3.resource('dynamodb')
          cloudwatch = boto3.client('cloudwatch')
          
          def lambda_handler(event, context):
              """アクティブ接続数をカスタムメトリクスとして送信"""
              try:
                  table_name = os.environ['CONNECTIONS_TABLE']
                  table = dynamodb.Table(table_name)
                  
                  # アクティブ接続数をカウント
                  response = table.scan(
                      Select='COUNT',
                      FilterExpression='attribute_exists(connectionId)'
                  )
                  
                  active_connections = response['Count']
                  
                  # CloudWatchカスタムメトリクスに送信
                  cloudwatch.put_metric_data(
                      Namespace=f"{os.environ['PROJECT_NAME']}/WebSocket",
                      MetricData=[
                          {
                              'MetricName': 'ActiveConnections',
                              'Value': active_connections,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {
                                      'Name': 'Environment',
                                      'Value': os.environ['ENVIRONMENT']
                                  }
                              ],
                              'Timestamp': datetime.utcnow()
                          }
                      ]
                  )
                  
                  print(f"Reported {active_connections} active connections")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'activeConnections': active_connections
                      })
                  }
                  
              except Exception as e:
                  print(f"Error counting connections: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

  ConnectionCountRole:
    Type: AWS::IAM::Role
    Condition: IsStandardMonitoring
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ConnectionCountPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ConnectionsTableName}'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # 接続数監視スケジュール
  ConnectionCountSchedule:
    Type: AWS::Events::Rule
    Condition: IsStandardMonitoring
    Properties:
      Description: アクティブ接続数の定期監視
      ScheduleExpression: 'rate(1 minute)'
      Targets:
        - Arn: !GetAtt ConnectionCountFunction.Arn
          Id: ConnectionCountTarget

  ConnectionCountPermission:
    Type: AWS::Lambda::Permission
    Condition: IsStandardMonitoring
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectionCountFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ConnectionCountSchedule.Arn

  # 同時接続数アラーム
  HighConnectionCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsStandardMonitoring
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-high-connection-count'
      AlarmDescription: 高い同時接続数の監視
      MetricName: ActiveConnections
      Namespace: !Sub '${ProjectName}/WebSocket'
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 800
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: Environment
          Value: !Ref EnvironmentName
      AlarmActions:
        - !Ref AlertTopic

  # ========================================
  # X-Ray分散トレーシング（高度監視）
  # ========================================
  XRayServiceMap:
    Type: AWS::XRay::ServiceMap
    Condition: IsAdvancedMonitoring
    Properties:
      ServiceMapName: !Sub '${ProjectName}-${EnvironmentName}-service-map'
      Tags:
        Environment: !Ref EnvironmentName
        Project: !Ref ProjectName

  # ========================================
  # AWS Config設定コンプライアンス（高度監視）
  # ========================================
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Condition: IsAdvancedMonitoring
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-recorder'
      RoleARN: !GetAtt ConfigRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true

  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Condition: IsAdvancedMonitoring
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-delivery'
      S3BucketName: !Ref ConfigBucket

  ConfigBucket:
    Type: AWS::S3::Bucket
    Condition: IsAdvancedMonitoring
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-config-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldConfigFiles
            Status: Enabled
            ExpirationInDays: 90

  ConfigRole:
    Type: AWS::IAM::Role
    Condition: IsAdvancedMonitoring
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/ConfigRole
      Policies:
        - PolicyName: ConfigDeliveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:ListBucket
                Resource: !GetAtt ConfigBucket.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${ConfigBucket}/*'

  # ========================================
  # CloudTrail監査ログ（高度監視）
  # ========================================
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: IsAdvancedMonitoring
    Properties:
      TrailName: !Sub '${ProjectName}-${EnvironmentName}-audit-trail'
      S3BucketName: !Ref CloudTrailBucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: AWS::DynamoDB::Table
              Values:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ConnectionsTableName}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MessagesTableName}'
            - Type: AWS::S3::Object
              Values:
                - !Sub '${CloudTrailBucket}/*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Condition: IsAdvancedMonitoring
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-audit-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldAuditLogs
            Status: Enabled
            ExpirationInDays: 365

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsAdvancedMonitoring
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${CloudTrailBucket}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Ref CloudTrailBucket

  # ========================================
  # Systems Manager 運用自動化
  # ========================================
  # パフォーマンス最適化自動化ドキュメント
  OptimizationDocument:
    Type: AWS::SSM::Document
    Condition: IsAdvancedMonitoring
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      Name: !Sub '${ProjectName}-${EnvironmentName}-optimize-performance'
      Content:
        schemaVersion: '0.3'
        description: リアルタイムシステムのパフォーマンス最適化
        assumeRole: !GetAtt AutomationRole.Arn
        parameters:
          WebSocketApiId:
            type: String
            default: !Ref WebSocketApiId
          Environment:
            type: String
            default: !Ref EnvironmentName
        mainSteps:
          - name: CheckConnectionCount
            action: 'aws:executeAwsApi'
            inputs:
              Service: dynamodb
              Api: Scan
              TableName: !Ref ConnectionsTableName
              Select: COUNT
            outputs:
              - Name: ConnectionCount
                Selector: $.Count
          - name: OptimizeDynamoDB
            action: 'aws:executeAwsApi'
            when:
              NumericGreater:
                - '{{ CheckConnectionCount.ConnectionCount }}'
                - 500
            inputs:
              Service: application-autoscaling
              Api: PutScalingPolicy
              PolicyName: DynamoDBScaleUp
              ServiceNamespace: dynamodb
              ResourceId: !Sub 'table/${ConnectionsTableName}'
              ScalableDimension: dynamodb:table:ReadCapacityUnits

  AutomationRole:
    Type: AWS::IAM::Role
    Condition: IsAdvancedMonitoring
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AutomationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - application-autoscaling:PutScalingPolicy
                  - apigateway:GET
                Resource: '*'

# ========================================
# 出力値
# ========================================
Outputs:
  AlertTopicArn:
    Description: アラート通知用SNSトピックARN
    Value: !Ref AlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopic'

  SystemHealthAlarmArn:
    Description: システム健全性コンポジットアラームARN
    Value: !Ref SystemHealthCompositeAlarm
    Export:
      Name: !Sub '${AWS::StackName}-SystemHealthAlarm'

  ConnectionCountFunctionArn:
    Condition: IsStandardMonitoring
    Description: 接続数監視Lambda関数ARN
    Value: !GetAtt ConnectionCountFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConnectionCountFunction'

  CloudTrailArn:
    Condition: IsAdvancedMonitoring
    Description: 監査用CloudTrailARN
    Value: !GetAtt CloudTrail.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrail'

  MonitoringDashboardURL:
    Description: CloudWatch監視ダッシュボードURL
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:'

  MonitoringLevel:
    Description: 設定された監視レベル
    Value: !Ref MonitoringLevel
    Export:
      Name: !Sub '${AWS::StackName}-MonitoringLevel'