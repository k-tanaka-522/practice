AWSTemplateFormatVersion: '2010-09-09'
Description: 'Claude Code and Bedrock AI-Driven Development Workspace'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  ProjectName:
    Type: String
    Default: ai-development
    Description: Project name for resource naming

  DeveloperEmail:
    Type: String
    Description: Email for notifications and access management

  BedrockModels:
    Type: CommaDelimitedList
    Default: 'anthropic.claude-3-sonnet-20240229-v1:0,amazon.titan-text-express-v1'
    Description: List of Bedrock models to enable

Resources:
  # S3 Bucket for AI Development Assets
  AIWorkspaceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-ai-workspace-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: AI-Development

  # DynamoDB Table for AI Interaction Logs
  AIInteractionLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${EnvironmentName}-ai-interactions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # DynamoDB Table for Code Generation Sessions
  CodeGenerationSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${EnvironmentName}-code-sessions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: project_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectIndex
          KeySchema:
            - AttributeName: project_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Function for Bedrock Integration
  BedrockIntegrationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-bedrock-integration'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BedrockIntegrationRole.Arn
      Timeout: 300
      MemorySize: 1024
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          ENVIRONMENT_NAME: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
          WORKSPACE_BUCKET: !Ref AIWorkspaceBucket
          INTERACTIONS_TABLE: !Ref AIInteractionLogsTable
          SESSIONS_TABLE: !Ref CodeGenerationSessionsTable
      Code:
        ZipFile: |
          import boto3
          import json
          import uuid
          import time
          from datetime import datetime, timedelta
          import os
          import base64
          
          bedrock = boto3.client('bedrock-runtime')
          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')
          cloudwatch = boto3.client('cloudwatch')
          
          def handler(event, context):
              try:
                  action = event.get('action', 'generate_code')
                  
                  if action == 'generate_code':
                      return generate_code(event)
                  elif action == 'analyze_code':
                      return analyze_code(event)
                  elif action == 'optimize_code':
                      return optimize_code(event)
                  elif action == 'generate_tests':
                      return generate_tests(event)
                  else:
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Invalid action'})
                      }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
          
          def generate_code(event):
              """Generate code using Bedrock"""
              session_id = str(uuid.uuid4())
              user_id = event.get('user_id', 'anonymous')
              prompt = event.get('prompt', '')
              model_id = event.get('model_id', 'anthropic.claude-3-sonnet-20240229-v1:0')
              
              # Log interaction start
              log_interaction(session_id, user_id, 'code_generation', {
                  'prompt': prompt,
                  'model_id': model_id,
                  'status': 'started'
              })
              
              try:
                  # Prepare prompt for code generation
                  code_prompt = f"""
                  Human: You are an expert software developer. Generate clean, well-documented code based on the following requirements:
                  
                  {prompt}
                  
                  Please provide:
                  1. Clean, production-ready code
                  2. Proper error handling
                  3. Comprehensive comments
                  4. Unit test suggestions
                  
                  Assistant: I'll help you generate clean, production-ready code based on your requirements.
                  """
                  
                  # Call Bedrock
                  response = bedrock.invoke_model(
                      modelId=model_id,
                      body=json.dumps({
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 4000,
                          "temperature": 0.3,
                          "messages": [
                              {
                                  "role": "user",
                                  "content": code_prompt
                              }
                          ]
                      }),
                      contentType='application/json'
                  )
                  
                  result = json.loads(response['body'].read())
                  generated_code = result['content'][0]['text']
                  
                  # Save to S3
                  s3_key = f"code-generation/{session_id}/generated_code.md"
                  s3.put_object(
                      Bucket=os.environ['WORKSPACE_BUCKET'],
                      Key=s3_key,
                      Body=generated_code,
                      ContentType='text/markdown'
                  )
                  
                  # Save session
                  save_code_session(session_id, event.get('project_id', 'default'), {
                      'type': 'code_generation',
                      'prompt': prompt,
                      'generated_code': generated_code,
                      's3_location': f"s3://{os.environ['WORKSPACE_BUCKET']}/{s3_key}",
                      'model_id': model_id,
                      'tokens_used': result.get('usage', {}).get('output_tokens', 0)
                  })
                  
                  # Log successful completion
                  log_interaction(session_id, user_id, 'code_generation', {
                      'status': 'completed',
                      'tokens_used': result.get('usage', {}).get('output_tokens', 0),
                      's3_location': f"s3://{os.environ['WORKSPACE_BUCKET']}/{s3_key}"
                  })
                  
                  # Send metrics
                  send_metrics('CodeGeneration', 1, session_id)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'session_id': session_id,
                          'generated_code': generated_code,
                          's3_location': f"s3://{os.environ['WORKSPACE_BUCKET']}/{s3_key}",
                          'tokens_used': result.get('usage', {}).get('output_tokens', 0)
                      })
                  }
              except Exception as e:
                  log_interaction(session_id, user_id, 'code_generation', {
                      'status': 'failed',
                      'error': str(e)
                  })
                  send_metrics('CodeGenerationErrors', 1, session_id)
                  raise
          
          def analyze_code(event):
              """Analyze existing code for improvements"""
              session_id = str(uuid.uuid4())
              user_id = event.get('user_id', 'anonymous')
              code = event.get('code', '')
              
              analysis_prompt = f"""
              Human: Please analyze the following code and provide:
              1. Code quality assessment
              2. Security vulnerabilities
              3. Performance improvements
              4. Best practices recommendations
              5. Refactoring suggestions
              
              Code to analyze:
              ```
              {code}
              ```
              
              Assistant: I'll analyze your code comprehensively across multiple dimensions.
              """
              
              response = bedrock.invoke_model(
                  modelId='anthropic.claude-3-sonnet-20240229-v1:0',
                  body=json.dumps({
                      "anthropic_version": "bedrock-2023-05-31",
                      "max_tokens": 3000,
                      "temperature": 0.2,
                      "messages": [
                          {
                              "role": "user",
                              "content": analysis_prompt
                          }
                      ]
                  }),
                  contentType='application/json'
              )
              
              result = json.loads(response['body'].read())
              analysis = result['content'][0]['text']
              
              # Save analysis
              s3_key = f"code-analysis/{session_id}/analysis_report.md"
              s3.put_object(
                  Bucket=os.environ['WORKSPACE_BUCKET'],
                  Key=s3_key,
                  Body=analysis,
                  ContentType='text/markdown'
              )
              
              send_metrics('CodeAnalysis', 1, session_id)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'session_id': session_id,
                      'analysis': analysis,
                      's3_location': f"s3://{os.environ['WORKSPACE_BUCKET']}/{s3_key}"
                  })
              }
          
          def generate_tests(event):
              """Generate unit tests for given code"""
              session_id = str(uuid.uuid4())
              code = event.get('code', '')
              test_framework = event.get('test_framework', 'pytest')
              
              test_prompt = f"""
              Human: Generate comprehensive unit tests for the following code using {test_framework}.
              
              Include:
              1. Test cases for normal scenarios
              2. Edge case testing
              3. Error condition testing
              4. Mock objects where needed
              5. Clear test descriptions
              
              Code to test:
              ```
              {code}
              ```
              
              Assistant: I'll generate comprehensive unit tests for your code.
              """
              
              response = bedrock.invoke_model(
                  modelId='anthropic.claude-3-sonnet-20240229-v1:0',
                  body=json.dumps({
                      "anthropic_version": "bedrock-2023-05-31",
                      "max_tokens": 3000,
                      "temperature": 0.3,
                      "messages": [
                          {
                              "role": "user",
                              "content": test_prompt
                          }
                      ]
                  }),
                  contentType='application/json'
              )
              
              result = json.loads(response['body'].read())
              tests = result['content'][0]['text']
              
              # Save tests
              s3_key = f"test-generation/{session_id}/test_suite.py"
              s3.put_object(
                  Bucket=os.environ['WORKSPACE_BUCKET'],
                  Key=s3_key,
                  Body=tests,
                  ContentType='text/python'
              )
              
              send_metrics('TestGeneration', 1, session_id)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'session_id': session_id,
                      'tests': tests,
                      's3_location': f"s3://{os.environ['WORKSPACE_BUCKET']}/{s3_key}"
                  })
              }
          
          def log_interaction(session_id, user_id, interaction_type, data):
              """Log AI interaction to DynamoDB"""
              table = dynamodb.Table(os.environ['INTERACTIONS_TABLE'])
              
              item = {
                  'session_id': session_id,
                  'timestamp': datetime.utcnow().isoformat(),
                  'user_id': user_id,
                  'interaction_type': interaction_type,
                  'data': data,
                  'ttl': int((datetime.utcnow() + timedelta(days=30)).timestamp())
              }
              
              table.put_item(Item=item)
          
          def save_code_session(session_id, project_id, session_data):
              """Save code generation session"""
              table = dynamodb.Table(os.environ['SESSIONS_TABLE'])
              
              item = {
                  'session_id': session_id,
                  'project_id': project_id,
                  'created_at': datetime.utcnow().isoformat(),
                  'session_data': session_data,
                  'ttl': int((datetime.utcnow() + timedelta(days=90)).timestamp())
              }
              
              table.put_item(Item=item)
          
          def send_metrics(metric_name, value, session_id):
              """Send custom metrics to CloudWatch"""
              cloudwatch.put_metric_data(
                  Namespace=f"{os.environ['PROJECT_NAME']}/AI-Development",
                  MetricData=[
                      {
                          'MetricName': metric_name,
                          'Value': value,
                          'Unit': 'Count',
                          'Dimensions': [
                              {
                                  'Name': 'Environment',
                                  'Value': os.environ['ENVIRONMENT_NAME']
                              },
                              {
                                  'Name': 'SessionId',
                                  'Value': session_id
                              }
                          ]
                      }
                  ]
              )

  # IAM Role for Bedrock Integration Function
  BedrockIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: BedrockIntegrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:ListFoundationModels
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt AIWorkspaceBucket.Arn
                  - !Sub '${AIWorkspaceBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt AIInteractionLogsTable.Arn
                  - !GetAtt CodeGenerationSessionsTable.Arn
                  - !Sub '${AIInteractionLogsTable.Arn}/index/*'
                  - !Sub '${CodeGenerationSessionsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # API Gateway for Bedrock Integration
  BedrockAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-bedrock-api'
      Description: 'API for Bedrock AI development integration'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # API Gateway Resources and Methods
  CodeGenerationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockAPI
      ParentId: !GetAtt BedrockAPI.RootResourceId
      PathPart: 'generate-code'

  CodeAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockAPI
      ParentId: !GetAtt BedrockAPI.RootResourceId
      PathPart: 'analyze-code'

  TestGenerationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockAPI
      ParentId: !GetAtt BedrockAPI.RootResourceId
      PathPart: 'generate-tests'

  # API Gateway Methods
  CodeGenerationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockAPI
      ResourceId: !Ref CodeGenerationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockIntegrationFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # Lambda Permissions for API Gateway
  APIGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockIntegrationFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BedrockAPI}/*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CodeGenerationMethod
    Properties:
      RestApiId: !Ref BedrockAPI
      StageName: !Ref EnvironmentName

  # CloudWatch Dashboard for AI Development Metrics
  AIDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${EnvironmentName}-AI-Development'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${ProjectName}/AI-Development", "CodeGeneration", "Environment", "${EnvironmentName}" ],
                  [ "${ProjectName}/AI-Development", "CodeAnalysis", "Environment", "${EnvironmentName}" ],
                  [ "${ProjectName}/AI-Development", "TestGeneration", "Environment", "${EnvironmentName}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "AI Development Activities",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${BedrockIntegrationFunction}" ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${BedrockIntegrationFunction}" ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${BedrockIntegrationFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Performance",
                "period": 300
              }
            }
          ]
        }

  # SNS Topic for AI Development Notifications
  AINotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${EnvironmentName}-ai-notifications'
      DisplayName: 'AI Development Notifications'

  AINotificationsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AINotificationsTopic
      Protocol: email
      Endpoint: !Ref DeveloperEmail

Outputs:
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${BedrockAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  WorkspaceBucketName:
    Description: S3 Bucket for AI Workspace
    Value: !Ref AIWorkspaceBucket
    Export:
      Name: !Sub '${AWS::StackName}-WorkspaceBucket'

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${EnvironmentName}-AI-Development'

  InteractionLogsTable:
    Description: DynamoDB Table for AI Interaction Logs
    Value: !Ref AIInteractionLogsTable
    Export:
      Name: !Sub '${AWS::StackName}-InteractionLogsTable'

  CodeSessionsTable:
    Description: DynamoDB Table for Code Generation Sessions
    Value: !Ref CodeGenerationSessionsTable
    Export:
      Name: !Sub '${AWS::StackName}-CodeSessionsTable'