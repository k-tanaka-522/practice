AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Bedrock テキスト生成実装 - AI テキスト処理サービス
  
  このテンプレートは以下のリソースを作成します：
  - Lambda関数（テキスト生成・要約・翻訳）
  - API Gateway（RESTful APIエンドポイント）
  - DynamoDB（リクエスト履歴・キャッシュ）
  - SQS（非同期処理キュー）
  - CloudWatch（監視・ログ・メトリクス）
  - S3（大容量出力・テンプレート保存）

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: |
      環境名
      - dev: 開発環境（基本機能）
      - staging: ステージング環境（負荷テスト対応）
      - prod: 本番環境（高性能・高可用性）

  ProjectName:
    Type: String
    Default: text-generation
    Description: リソース命名に使用するプロジェクト名

  # Bedrockモデル設定
  DefaultTextModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    AllowedValues: 
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
      - amazon.titan-text-express-v1
      - amazon.titan-text-lite-v1
    Description: |
      デフォルトテキスト生成モデル
      - Claude 3 Sonnet: 高品質・バランス型
      - Claude 3 Haiku: 高速・軽量型
      - Titan Express: Amazon製・汎用型
      - Titan Lite: 軽量・低コスト型

  # API設定
  ApiThrottleRate:
    Type: Number
    Default: 100
    MinValue: 10
    MaxValue: 10000
    Description: |
      API スロットリング レート（リクエスト/秒）
      本番環境では適切な値に調整

  ApiBurstLimit:
    Type: Number
    Default: 200
    MinValue: 20
    MaxValue: 20000
    Description: |
      API バースト制限（同時リクエスト数）
      瞬間的なトラフィック増加に対応

  # キャッシュ設定
  EnableCaching:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: |
      レスポンスキャッシュの有効化
      同一リクエストの高速化・コスト削減

  CacheRetentionHours:
    Type: Number
    Default: 24
    MinValue: 1
    MaxValue: 168
    Description: |
      キャッシュ保持時間（時間）
      長期間は精度、短期間は最新性を重視

  # BedrockセットアップスタックからのImport
  BedrockStackName:
    Type: String
    Description: |
      Bedrockセットアップスタック名
      bedrock-setup.yamlで作成されたスタック名

Conditions:
  # 本番環境かどうか
  IsProduction: !Equals [!Ref EnvironmentName, 'prod']
  
  # キャッシュ機能を使用するか
  UseCaching: !Equals [!Ref EnableCaching, 'true']

Resources:
  # ========================================
  # DynamoDB テーブル（履歴・キャッシュ）
  # ========================================
  # リクエスト履歴テーブル
  RequestHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${EnvironmentName}-request-history'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: requestId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: modelId
          AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserHistoryIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ModelUsageIndex
          KeySchema:
            - AttributeName: modelId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # レスポンスキャッシュテーブル
  ResponseCacheTable:
    Type: AWS::DynamoDB::Table
    Condition: UseCaching
    Properties:
      TableName: !Sub '${ProjectName}-${EnvironmentName}-response-cache'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: requestHash
          AttributeType: S
      KeySchema:
        - AttributeName: requestHash
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # SQS キュー（非同期処理）
  # ========================================
  # テキスト生成タスクキュー
  TextGenerationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${EnvironmentName}-text-generation.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true
      VisibilityTimeoutSeconds: 900  # 15分
      MessageRetentionPeriod: 1209600  # 14日
      DeadLetterTargetArn: !GetAtt TextGenerationDLQ.Arn
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TextGenerationDLQ.Arn
        maxReceiveCount: 3
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # デッドレターキュー
  TextGenerationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${EnvironmentName}-text-generation-dlq.fifo'
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14日
      KmsMasterKeyId: alias/aws/sqs

  # ========================================
  # Lambda関数群
  # ========================================
  # テキスト生成API Lambda
  TextGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-text-generation-api'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt TextGenerationRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          DEFAULT_MODEL: !Ref DefaultTextModel
          HISTORY_TABLE: !Ref RequestHistoryTable
          CACHE_TABLE: !If [UseCaching, !Ref ResponseCacheTable, ""]
          QUEUE_URL: !Ref TextGenerationQueue
          OUTPUT_BUCKET: 
            Fn::ImportValue: !Sub '${BedrockStackName}-BedrockOutputBucket'
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
          ENABLE_CACHING: !Ref EnableCaching
          CACHE_RETENTION_HOURS: !Ref CacheRetentionHours
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import hashlib
          import uuid
          from datetime import datetime, timedelta
          import re
          
          bedrock_runtime = boto3.client('bedrock-runtime')
          dynamodb = boto3.resource('dynamodb')
          sqs = boto3.client('sqs')
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              """テキスト生成API メインハンドラー"""
              
              try:
                  # リクエスト解析
                  if 'body' in event:
                      request_body = json.loads(event['body'])
                  else:
                      request_body = event
                  
                  # パラメータ抽出
                  text_input = request_body.get('input', '')
                  model_id = request_body.get('model', os.environ['DEFAULT_MODEL'])
                  task_type = request_body.get('task', 'generation')  # generation, summary, translation
                  user_id = request_body.get('userId', 'anonymous')
                  async_mode = request_body.get('async', False)
                  
                  # 入力検証
                  if not text_input or len(text_input.strip()) == 0:
                      return error_response(400, "Input text is required")
                  
                  if len(text_input) > 100000:  # 100KB制限
                      return error_response(400, "Input text too long (max 100KB)")
                  
                  # リクエストID生成
                  request_id = str(uuid.uuid4())
                  
                  # 非同期処理の場合はキューに送信
                  if async_mode:
                      return handle_async_request(request_id, request_body)
                  
                  # 同期処理
                  return handle_sync_request(request_id, text_input, model_id, task_type, user_id)
                  
              except Exception as e:
                  print(f"Error in text generation: {str(e)}")
                  return error_response(500, f"Internal server error: {str(e)}")
          
          def handle_sync_request(request_id, text_input, model_id, task_type, user_id):
              """同期テキスト生成処理"""
              
              try:
                  # キャッシュチェック
                  if os.environ.get('ENABLE_CACHING') == 'true':
                      cached_response = check_cache(text_input, model_id, task_type)
                      if cached_response:
                          print(f"Cache hit for request {request_id}")
                          return success_response(cached_response, cached=True)
                  
                  # テキスト生成実行
                  result = generate_text(text_input, model_id, task_type)
                  
                  # 履歴保存
                  save_request_history(request_id, user_id, text_input, result, model_id, task_type)
                  
                  # キャッシュ保存
                  if os.environ.get('ENABLE_CACHING') == 'true':
                      save_to_cache(text_input, model_id, task_type, result)
                  
                  return success_response(result)
                  
              except Exception as e:
                  print(f"Error in sync processing: {str(e)}")
                  raise e
          
          def handle_async_request(request_id, request_body):
              """非同期テキスト生成処理"""
              
              try:
                  # SQSキューに送信
                  message_body = {
                      'requestId': request_id,
                      'requestBody': request_body,
                      'timestamp': datetime.utcnow().isoformat()
                  }
                  
                  sqs.send_message(
                      QueueUrl=os.environ['QUEUE_URL'],
                      MessageBody=json.dumps(message_body),
                      MessageGroupId=request_body.get('userId', 'default'),
                      MessageDeduplicationId=request_id
                  )
                  
                  return {
                      'statusCode': 202,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'requestId': request_id,
                          'status': 'queued',
                          'message': 'Request queued for async processing'
                      })
                  }
                  
              except Exception as e:
                  print(f"Error in async processing: {str(e)}")
                  raise e
          
          def generate_text(input_text, model_id, task_type):
              """Bedrockを使用したテキスト生成"""
              
              # タスクタイプに応じたプロンプト構築
              prompt = build_prompt(input_text, task_type)
              
              if model_id.startswith('anthropic.claude'):
                  return generate_with_claude(prompt, model_id)
              elif model_id.startswith('amazon.titan'):
                  return generate_with_titan(prompt, model_id)
              else:
                  raise ValueError(f"Unsupported model: {model_id}")
          
          def build_prompt(input_text, task_type):
              """タスクタイプに応じたプロンプト構築"""
              
              prompts = {
                  'generation': f"Please continue or expand on the following text:\n\n{input_text}",
                  'summary': f"Please provide a concise summary of the following text:\n\n{input_text}",
                  'translation': f"Please translate the following text to English:\n\n{input_text}",
                  'analysis': f"Please analyze the following text and provide insights:\n\n{input_text}",
                  'rewrite': f"Please rewrite the following text to improve clarity and style:\n\n{input_text}"
              }
              
              return prompts.get(task_type, prompts['generation'])
          
          def generate_with_claude(prompt, model_id):
              """Claude モデルでテキスト生成"""
              
              request_body = {
                  "anthropic_version": "bedrock-2023-05-31",
                  "max_tokens": 1000,
                  "messages": [
                      {
                          "role": "user",
                          "content": prompt
                      }
                  ],
                  "temperature": 0.7,
                  "top_p": 0.9
              }
              
              response = bedrock_runtime.invoke_model(
                  modelId=model_id,
                  body=json.dumps(request_body),
                  contentType="application/json",
                  accept="application/json"
              )
              
              response_body = json.loads(response['body'].read())
              
              return {
                  'model': model_id,
                  'generated_text': response_body.get('content', [{}])[0].get('text', ''),
                  'usage': response_body.get('usage', {}),
                  'timestamp': datetime.utcnow().isoformat()
              }
          
          def generate_with_titan(prompt, model_id):
              """Titan モデルでテキスト生成"""
              
              request_body = {
                  "inputText": prompt,
                  "textGenerationConfig": {
                      "maxTokenCount": 1000,
                      "temperature": 0.7,
                      "topP": 0.9,
                      "stopSequences": []
                  }
              }
              
              response = bedrock_runtime.invoke_model(
                  modelId=model_id,
                  body=json.dumps(request_body),
                  contentType="application/json",
                  accept="application/json"
              )
              
              response_body = json.loads(response['body'].read())
              
              return {
                  'model': model_id,
                  'generated_text': response_body.get('results', [{}])[0].get('outputText', ''),
                  'usage': response_body.get('inputTextTokenCount', 0),
                  'timestamp': datetime.utcnow().isoformat()
              }
          
          def check_cache(input_text, model_id, task_type):
              """キャッシュから結果を取得"""
              
              if not os.environ.get('CACHE_TABLE'):
                  return None
              
              try:
                  cache_table = dynamodb.Table(os.environ['CACHE_TABLE'])
                  request_hash = generate_request_hash(input_text, model_id, task_type)
                  
                  response = cache_table.get_item(
                      Key={'requestHash': request_hash}
                  )
                  
                  if 'Item' in response:
                      return response['Item'].get('result')
                  
                  return None
                  
              except Exception as e:
                  print(f"Cache check error: {str(e)}")
                  return None
          
          def save_to_cache(input_text, model_id, task_type, result):
              """結果をキャッシュに保存"""
              
              if not os.environ.get('CACHE_TABLE'):
                  return
              
              try:
                  cache_table = dynamodb.Table(os.environ['CACHE_TABLE'])
                  request_hash = generate_request_hash(input_text, model_id, task_type)
                  
                  ttl = int((datetime.utcnow() + timedelta(
                      hours=int(os.environ['CACHE_RETENTION_HOURS'])
                  )).timestamp())
                  
                  cache_table.put_item(
                      Item={
                          'requestHash': request_hash,
                          'result': result,
                          'ttl': ttl,
                          'createdAt': datetime.utcnow().isoformat()
                      }
                  )
                  
              except Exception as e:
                  print(f"Cache save error: {str(e)}")
          
          def save_request_history(request_id, user_id, input_text, result, model_id, task_type):
              """リクエスト履歴を保存"""
              
              try:
                  history_table = dynamodb.Table(os.environ['HISTORY_TABLE'])
                  
                  # 大きなテキストはS3に保存
                  if len(input_text) > 1000 or len(str(result)) > 1000:
                      s3_key = f"requests/{request_id}.json"
                      s3.put_object(
                          Bucket=os.environ['OUTPUT_BUCKET'],
                          Key=s3_key,
                          Body=json.dumps({
                              'input': input_text,
                              'output': result
                          }),
                          ContentType='application/json'
                      )
                      
                      input_text = f"[Stored in S3: s3://{os.environ['OUTPUT_BUCKET']}/{s3_key}]"
                      result = "[Stored in S3]"
                  
                  history_table.put_item(
                      Item={
                          'requestId': request_id,
                          'userId': user_id,
                          'timestamp': datetime.utcnow().isoformat(),
                          'modelId': model_id,
                          'taskType': task_type,
                          'inputText': input_text[:1000],  # 制限
                          'outputText': str(result)[:1000],  # 制限
                          'ttl': int((datetime.utcnow() + timedelta(days=30)).timestamp())
                      }
                  )
                  
              except Exception as e:
                  print(f"History save error: {str(e)}")
          
          def generate_request_hash(input_text, model_id, task_type):
              """リクエストのハッシュ値生成"""
              content = f"{input_text}:{model_id}:{task_type}"
              return hashlib.sha256(content.encode()).hexdigest()
          
          def success_response(result, cached=False):
              """成功レスポンス"""
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': json.dumps({
                      'success': True,
                      'result': result,
                      'cached': cached
                  })
              }
          
          def error_response(status_code, message):
              """エラーレスポンス"""
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': json.dumps({
                      'success': False,
                      'error': message
                  })
              }
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # 非同期処理Lambda
  AsyncTextProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-async-processor'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt TextGenerationRole.Arn
      Timeout: 900  # 15分
      MemorySize: 2048
      ReservedConcurrencyLimit: !If [IsProduction, 20, 5]
      Environment:
        Variables:
          DEFAULT_MODEL: !Ref DefaultTextModel
          HISTORY_TABLE: !Ref RequestHistoryTable
          OUTPUT_BUCKET: 
            Fn::ImportValue: !Sub '${BedrockStackName}-BedrockOutputBucket'
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime
          
          bedrock_runtime = boto3.client('bedrock-runtime')
          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')
          
          def lambda_handler(event, context):
              """非同期テキスト処理"""
              
              try:
                  for record in event['Records']:
                      # SQSメッセージ処理
                      message_body = json.loads(record['body'])
                      request_id = message_body['requestId']
                      request_data = message_body['requestBody']
                      
                      print(f"Processing async request: {request_id}")
                      
                      # テキスト生成実行
                      result = process_text_generation(request_data)
                      
                      # 結果をS3に保存
                      s3_key = f"async-results/{request_id}.json"
                      s3.put_object(
                          Bucket=os.environ['OUTPUT_BUCKET'],
                          Key=s3_key,
                          Body=json.dumps({
                              'requestId': request_id,
                              'result': result,
                              'processedAt': datetime.utcnow().isoformat()
                          }, indent=2),
                          ContentType='application/json'
                      )
                      
                      # 履歴更新
                      update_request_status(request_id, 'completed', s3_key)
                      
                      print(f"Completed async request: {request_id}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Async processing completed')
                  }
                  
              except Exception as e:
                  print(f"Error in async processing: {str(e)}")
                  raise e
          
          def process_text_generation(request_data):
              """テキスト生成処理（同期版から移植）"""
              # 実装は同期版のgenerate_textと同様
              pass
          
          def update_request_status(request_id, status, s3_location):
              """リクエストステータス更新"""
              try:
                  history_table = dynamodb.Table(os.environ['HISTORY_TABLE'])
                  history_table.update_item(
                      Key={'requestId': request_id},
                      UpdateExpression='SET #status = :status, #location = :location',
                      ExpressionAttributeNames={
                          '#status': 'status',
                          '#location': 's3Location'
                      },
                      ExpressionAttributeValues={
                          ':status': status,
                          ':location': s3_location
                      }
                  )
              except Exception as e:
                  print(f"Status update error: {str(e)}")
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # SQSトリガー設定
  AsyncProcessorEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt TextGenerationQueue.Arn
      FunctionName: !Ref AsyncTextProcessorFunction
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 5

  # ========================================
  # API Gateway
  # ========================================
  # REST API
  TextGenerationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-text-generation-api'
      Description: AI powered text generation API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'
            Condition:
              IpAddress:
                aws:sourceIp: 
                  - 0.0.0.0/0  # 本番環境では制限

  # API Gateway リソース
  TextGenerationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TextGenerationApi
      ParentId: !GetAtt TextGenerationApi.RootResourceId
      PathPart: generate

  # POST メソッド
  TextGenerationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TextGenerationApi
      ResourceId: !Ref TextGenerationResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TextGenerationFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # CORS設定
  TextGenerationOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TextGenerationApi
      ResourceId: !Ref TextGenerationResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # API デプロイメント
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TextGenerationMethod
      - TextGenerationOptionsMethod
    Properties:
      RestApiId: !Ref TextGenerationApi
      Description: !Sub '${EnvironmentName} deployment'

  # API ステージ
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TextGenerationApi
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref EnvironmentName
      ThrottleSettings:
        RateLimit: !Ref ApiThrottleRate
        BurstLimit: !Ref ApiBurstLimit
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: !If [IsProduction, ERROR, INFO]
          DataTraceEnabled: !If [IsProduction, false, true]
          MetricsEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # Lambda実行権限
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TextGenerationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TextGenerationApi}/*'

  # ========================================
  # IAMロール
  # ========================================
  TextGenerationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TextGenerationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt RequestHistoryTable.Arn
                  - !Sub '${RequestHistoryTable.Arn}/index/*'
                  - !If 
                    - UseCaching
                    - !GetAtt ResponseCacheTable.Arn
                    - !Ref AWS::NoValue
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  Fn::Sub:
                    - '${BucketArn}/*'
                    - BucketArn: 
                        Fn::ImportValue: !Sub '${BedrockStackName}-BedrockOutputBucket'
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: 
                  - !GetAtt TextGenerationQueue.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: 
                  Fn::ImportValue: !Sub '${BedrockStackName}-BedrockKMSKeyArn'

  # ========================================
  # CloudWatch 監視
  # ========================================
  # API Gateway ログ
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ProjectName}-${EnvironmentName}-text-generation'
      RetentionInDays: !If [IsProduction, 90, 30]

  # Lambda ログ
  TextGenerationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${EnvironmentName}-text-generation-api'
      RetentionInDays: !If [IsProduction, 30, 7]

  AsyncProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${EnvironmentName}-async-processor'
      RetentionInDays: !If [IsProduction, 30, 7]

  # API Gateway エラーアラーム
  ApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-api-errors'
      AlarmDescription: Text Generation API error rate is high
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: ApiName
          Value: !Ref TextGenerationApi
        - Name: Stage
          Value: !Ref EnvironmentName

  # Lambda エラーアラーム
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${EnvironmentName}-lambda-errors'
      AlarmDescription: Text Generation Lambda error rate is high
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref TextGenerationFunction

# ========================================
# 出力値（他のスタックから参照可能）
# ========================================
Outputs:
  # API エンドポイント
  ApiEndpoint:
    Description: Text Generation API エンドポイント
    Value: !Sub 'https://${TextGenerationApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/generate'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ApiId:
    Description: API Gateway ID
    Value: !Ref TextGenerationApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  # Lambda関数
  TextGenerationFunctionArn:
    Description: Text Generation Lambda関数ARN
    Value: !GetAtt TextGenerationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TextGenerationFunction'

  AsyncProcessorFunctionArn:
    Description: Async Processor Lambda関数ARN
    Value: !GetAtt AsyncTextProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AsyncProcessorFunction'

  # DynamoDB テーブル
  RequestHistoryTableName:
    Description: リクエスト履歴テーブル名
    Value: !Ref RequestHistoryTable
    Export:
      Name: !Sub '${AWS::StackName}-RequestHistoryTable'

  ResponseCacheTableName:
    Condition: UseCaching
    Description: レスポンスキャッシュテーブル名
    Value: !Ref ResponseCacheTable
    Export:
      Name: !Sub '${AWS::StackName}-ResponseCacheTable'

  # SQS キュー
  TextGenerationQueueUrl:
    Description: テキスト生成キューURL
    Value: !Ref TextGenerationQueue
    Export:
      Name: !Sub '${AWS::StackName}-TextGenerationQueue'

  # 使用例
  ApiUsageExample:
    Description: API使用例
    Value: !Sub |
      テキスト生成API使用例:
      
      curl -X POST ${TextGenerationApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/generate \
        -H "Content-Type: application/json" \
        -d '{
          "input": "Write a short story about AI",
          "task": "generation",
          "model": "${DefaultTextModel}",
          "userId": "user123",
          "async": false
        }'

  # 設定概要
  ServiceConfiguration:
    Description: テキスト生成サービス設定概要
    Value: !Sub |
      Text Generation Service:
      - API: https://${TextGenerationApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}/generate
      - Model: ${DefaultTextModel}
      - Caching: ${EnableCaching}
      - Throttle: ${ApiThrottleRate} req/sec
      - Environment: ${EnvironmentName}
      - History: ${RequestHistoryTable}
      - Queue: ${TextGenerationQueue}